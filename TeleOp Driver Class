/* Copyright (c) 2014 Qualcomm Technologies Inc

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted (subject to the limitations in the disclaimer below) provided that
the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

Neither the name of Qualcomm Technologies Inc nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

////////////////////////////////////////////////////////////
// BE SURE TO ADD THIS OPMODE TO "FtcOpModeRegister.java" //
////////////////////////////////////////////////////////////

private class TeleOp extends OpMode
{
    // Starting method of the program, called first when opmode is executed, basically constructor
    @Override
    public void start()
    {
        // Declare variables //
        private boolean isTankDrive = true;
        protected DcMotor motorLeftDrive;
        protected DcMotor motorRightDrive;

        // reverse one of those ^

        protected DcMotor motorDebris;
        protected DcMotor motorLeftArm;
        protected DcMotor motorRightArm;
        protected DcMotor motorPivotArm;

        // Hardware Map-- place the proper names of the motors in the quotation marks ""
        motorLeftDrive = hardwareMap.dcMotor.get("");
        motorRightDrive = hardwareMap.dcMotor.get("");
        motorDebris = hardwareMap.dcMotor.get("");
        motorLeftArm = hardwareMap.dcMotor.get("");
        motorRightArm = hardwareMap.dcMotor.get("");
        motorPivotArm = hardwareMap.dcMotor.get("");
    }

    // Called after start(), runtime loop
    @Override
    public void loop()
    {
        // This segment of the program allows the driver to switch between drive modes on the fly, for preference and as a response to certain situations.
        // Allows toggling between tankDrive and haloDrive, I'm sure there's a more elegant way to do this
        if(GamePad1.y) // Placeholder button, this is an awful place to put a button that switches drive modes
        {
            isTankdrive = !isTankDrive;
        }

        // Determines which drive mode to use
        if(isTankdrive)
        {
            GamePad1.tankDrive();
        }
        else
        {
            GamePad1.runBucket();
        }

        GamePad2.extendArm();
        GamePad2.pivotArm();
    }

    // Called when opmode terminated, basically destructor
    @Override
    public void stop()
    {

    }
}
