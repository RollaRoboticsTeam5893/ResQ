/*5Copyright (c) 2014 Qualcomm Technologies Inc

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted (subject to the limitations in the disclaimer below) provided that
the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

Neither the name of Qualcomm Technologies Inc nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

protected static class GamePad1 extends TeleOp
{
    // Drivetrain mode- each joystick y-value controls the drivetrain motors of one side
    void tankDrive()
    {
        // Declare and initialize variables
        double leftThrottle = gamepad.left_stick_y;
        double rightThrottle = gamepad.right_stick_y;


        // Clip values to make them easier to work with.
        leftThrottle = Range.clip(leftThrottle, -1, 1);
        rightThrottle = Range.clip(rightThrottle, -1, 1);

        // Pass values through a scale(y = x^3) to acheive desired movement "feel" (accelerates slowly then quickly).
        leftThrottle = scaleInput(leftThrottle);
        rightThrottle = scaleInput(rightThrottle);

        // Power the motors
        motorLeftDrive.setPower(leftThrottle);
        motorRightDrive.setPower(rightThrottle);
    }

    // Drivetrain mode- values are manipulated to allow turning with the center on rotation either in the middle of the robot or on one of the back wheels- somewhat like a car
    // We dubbed this mode as "haloDrive" because the way its controls are arranged resembles first person games on a video game console
    void haloDrive()
    {
        // Put the old RobotC code here and make a few adjustments
    }

    // Handles i/o for the harvester motor on the bucket
    void runBucket()
    {
        int toggle;

        if(gamepad1.a)
        {
            // If the A button is pressed on gamepad 1
            toggle = 0;

            motorDebris.setPower(0.75);
        }
        else if(gamepad1.x)
        {
            // If the X button is pressed on gamepad 1
            toggle = 1;

            motorDebris.setPower(-0.75);
        }
        else if(gamepad1.b)
        {
            // If the B button is pressed on gamepad 1
            toggle = 2;

            motorDebris.setPower(0);
        }
        else
        {
            switch(toggle)
            {
                case 0:
                    motorDebris.setPower(0.75);
                case 2:
                    motorDebris.setPower(-0.75);
                case 3:
                    motorDebris.setPower(0);
                default:
                    motorDebris.setPower(0);
            }
        }
    }

    // Scales joystick input to give the robot the correct "feel" (accelerates slowly at first and then quickly)
    private double scaleInput(double value)
    {
        double motorPower;

        motorPower = Math.pow(value , 3);

        return motorPower;
    }
}
